FROM nvidia/cuda:11.8.0-devel-ubuntu20.04

WORKDIR /app

# In order to avoid interruptions during libraries install
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Europe/London
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Node.js, PM2 and other packages 
RUN apt-get update && apt-get install -y \
    wget git curl lsof procps build-essential python3-pip python3-dev \
    apt-utils vim sudo ffmpeg libsm6 libxext6 python3-tk git-lfs unzip \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && curl -sL https://deb.nodesource.com/setup_18.x | bash - \
    && apt-get install -y nodejs \
    && npm install -g pm2

# Miniconda
RUN wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O Miniconda.sh \
    && chmod +x Miniconda.sh \
    && ./Miniconda.sh -b \
    && rm Miniconda.sh

ENV PATH="/root/miniconda3/bin:${PATH}"

RUN conda create -n venv python=3.10.13 -y \
    && echo "source activate venv" > ~/.bashrc
ENV PATH="/root/miniconda3/envs/venv/bin:${PATH}"

# Cuda toolkit
RUN CUDA_VERSION="11.8.0" && \
    CUDA_VERSION_MAJOR=$(echo $CUDA_VERSION | cut -d'.' -f1) && \
    CUDA_VERSION_MINOR=$(echo $CUDA_VERSION | cut -d'.' -f2) && \
    CUDA_VERSION_SIMPLE="${CUDA_VERSION_MAJOR}.${CUDA_VERSION_MINOR}.0" && \
    conda install nvidia/label/cuda-${CUDA_VERSION_SIMPLE}::cuda-toolkit -y

# Vllm patch for cuda118 / llm server
COPY cu118_vllm_patch.sh /app/cu118_vllm_patch.sh
RUN chmod +x /app/cu118_vllm_patch.sh
RUN /app/cu118_vllm_patch.sh

# LLM server requirements
COPY llm_server/requirements.txt /app/llm_server_requirements.txt
RUN pip install -r /app/llm_server_requirements.txt

# Validator orchestrator requirements
COPY validator_orchestrator/requirements.txt /app/validator_orchestrator_requirements.txt
RUN conda run -n venv pip install --no-cache-dir -r /app/validator_orchestrator_requirements.txt \
    && conda run -n venv pip install --no-cache-dir huggingface_hub[hf_transfer]

# image server requirements
COPY image_server/requirements.txt /app/image_server_requirements.txt
RUN conda run -n venv pip install --no-cache-dir xformers==0.0.23.post1 torchvision torch --index-url https://download.pytorch.org/whl/cu118 \
    && conda run -n venv pip install --upgrade pip setuptools \
    && conda run -n venv pip install -r /app/image_server_requirements.txt \
    && conda run -n venv pip install protobuf huggingface_hub[hf_transfer]

ENV HF_HUB_ENABLE_HF_TRANSFER=1

# Copying everything (for autoupdates to work properly)
COPY ./ /app/

# Making all scripts executable
RUN chmod +x /app/orchestrator_autoupdater_action.sh \
    && chmod +x /app/llm_server/entrypoint.sh \
    && chmod +x /app/image_server/entrypoint_vali.sh \
    && chmod +x /app/image_server/setup.sh \
    && chmod +x /app/validator_orchestrator/entrypoint.sh

USER root

# Orchestrator server port
ARG SERVER_PORT=6920
ENV CURRENT_SERVER_PORT=${SERVER_PORT}
EXPOSE $CURRENT_SERVER_PORT

# image / llm server port
ARG SERVICE_SERVER_PORT=6919
ARG COMFYUI_SERVER_PORT=8188
ENV SERVICE_SERVER_PORT=${SERVICE_SERVER_PORT}
ENV COMFYUI_SERVER_PORT=${COMFYUI_SERVER_PORT}

# Change HF cache dir
RUN mkdir /app/cache/
ENV HF_HOME=/app/cache/

CMD ["sh", "-c", "rm -fR .git && cd /app/image_server && ./setup.sh && cd ..  && pm2-runtime start ecosystem_orchestrator.config.js"]