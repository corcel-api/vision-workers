name: Build, deploy & test - GCP & Runpod

on:
  push:
  pull_request:

jobs:
  build-all:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Decode SSH keys
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
        run: |
          mkdir /home/runner/.ssh
          echo "$SSH_PRIVATE_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine
          echo "$SSH_PUBLIC_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine.pub
          chmod 600 ~/.ssh/google_compute_engine
          chmod 644 ~/.ssh/google_compute_engine.pub

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      
      - name: Wait for Instance to be Ready
        run: |
          until gcloud compute ssh a100-cuda118 --zone us-central1-b --command "echo 'Instance is up'"; do
            echo 'Waiting for the instance to be ready...'
            sleep 10
          done
          echo 'Instance is ready!'

      - name: Clear remote directory
        run: gcloud compute ssh a100-cuda118 --zone us-central1-b --command "rm -rf /home/runner/*"

      - name: Copy updated repository to remote server
        run: gcloud compute scp --recurse /home/runner/work/vision-workers/vision-workers a100-cuda118:/home/runner/vision-workers --zone us-central1-b
      
      - name: Run script on remote server
        run: gcloud compute ssh a100-cuda118 --zone us-central1-b --command "export PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}; export BUILD_ID=${{ github.run_id }}; docker login --username=${{ secrets.DOCKER_USER }} --password=${{ secrets.DOCKER_PASSW }}; cd /home/runner/vision-workers && chmod +x ./build-docker-ci-remote.sh && bash ./build-docker-ci-remote.sh"
        env:
          PROJECT_ID: ${{ secrets.PROJECT_ID }}
          BUILD_ID: ${{ github.run_id }}
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASSW: ${{ secrets.DOCKER_PASSW }}

  deploy-gcp-jobs:
    needs: build-all
    runs-on: ubuntu-latest
    steps:
      - run: "echo EMPTY_STEP"

  deploy-runpod-jobs:
    needs: build-all
    runs-on: ubuntu-latest
    outputs:
      runPodEnabled: ${{ steps.read_config.outputs.runPodEnabled }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Read cicd config file
        id: read_config
        run: |
          CONFIG_CONTENT=$(cat cicd_config.json)
          RUNPOD_ENABLED=$(echo $CONFIG_CONTENT | jq '.runPodWorkflow')
          echo "RUNPOD_ENABLED=$RUNPOD_ENABLED" >> $GITHUB_ENV
          echo "::set-output name=runPodEnabled::$RUNPOD_ENABLED"

  gcp-deploy-orchestrator:
    needs: deploy-gcp-jobs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Decode SSH keys
        run: |
          mkdir /home/runner/.ssh
          echo "$SSH_PRIVATE_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine
          echo "$SSH_PUBLIC_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine.pub
          chmod 600 ~/.ssh/google_compute_engine
          chmod 644 ~/.ssh/google_compute_engine.pub
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Start orchestrator server
        run: gcloud compute ssh a100-cuda118 --zone us-central1-b --command "docker run -d --gpus all --runtime=nvidia -p ${{ secrets.PORT_ORCH }}:${{ secrets.PORT_ORCH }} -p ${{ secrets.PORT_LLM }}:${{ secrets.PORT_LLM }} corcelio/cicd:orchestrator-${{ github.run_id }}"
        env:
          PORT_ORCH: ${{ secrets.PORT_ORCH }}  
          PORT_LLM: ${{ secrets.PORT_LLM }}  

      - name: Wait for Orchestrator to be ready
        run: |
          gcloud compute ssh a100-cuda118 --zone us-central1-b --command "\
          until curl --connect-timeout 0 --max-time 0 localhost:${{ secrets.PORT_ORCH }}/docs; do \
            echo 'Waiting for the Orchestrator to be ready...'; \
            sleep 10; \
          done; \
          echo 'Orchestrator is ready!'"
        env:
          PORT_ORCH: ${{ secrets.PORT_ORCH }}
        timeout-minutes: 15

  gcp-test-orchestrator-image:
    needs: gcp-deploy-orchestrator
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Decode SSH keys
        run: |
          mkdir /home/runner/.ssh
          echo "$SSH_PRIVATE_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine
          echo "$SSH_PUBLIC_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine.pub
          chmod 600 ~/.ssh/google_compute_engine
          chmod 644 ~/.ssh/google_compute_engine.pub
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Copy json data for query
        run: gcloud compute scp --recurse /home/runner/work/vision-workers/vision-workers/ci-tests/orch-image-txt2img.json a100-cuda118:/home/runner/orch-image-txt2img.json --zone us-central1-b
      
      - name: Test gcp Orchestrator - Image
        uses: nick-fields/retry@v3
        with:
          max_attempts: 3
          retry_on: timeout
          timeout_minutes: 15
          command: |
            gcloud compute ssh a100-cuda118 --zone us-central1-b --command "\
              curl --connect-timeout 0 --max-time 0 -X POST localhost:${{ secrets.PORT_ORCH }}/check-result \
              -H 'Content-Type: application/json' \
              --data-binary @/home/runner/orch-image-txt2img.json"
        env:
          PORT_ORCH: ${{ secrets.PORT_ORCH }}
    
  gcp-test-orchestrator-avatar:
    needs: gcp-test-orchestrator-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Decode SSH keys
        run: |
          mkdir /home/runner/.ssh
          echo "$SSH_PRIVATE_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine
          echo "$SSH_PUBLIC_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine.pub
          chmod 600 ~/.ssh/google_compute_engine
          chmod 644 ~/.ssh/google_compute_engine.pub
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Copy json data to remote
        run: gcloud compute scp --recurse /home/runner/work/vision-workers/vision-workers/ci-tests/avatar-test.json a100-cuda118:/home/runner/avatar-test.json --zone us-central1-b
      
      - name: Test gcp Orchestrator - Image - Avatar
        uses: nick-fields/retry@v3
        with:
          max_attempts: 3
          retry_on: timeout
          timeout_minutes: 15
          command: |
            gcloud compute ssh a100-cuda118 --zone us-central1-b --command "\
              curl --connect-timeout 0 --max-time 0 -v -X POST localhost:${{ secrets.PORT_LLM }}/avatar \
              -H 'Content-Type: application/json' \
              --data-binary @/home/runner/avatar-test.json"
        env:
          PORT_LLM: ${{ secrets.PORT_LLM }}

  gcp-stop-test-orch:
    needs: gcp-test-orchestrator-avatar
    runs-on: ubuntu-latest
    steps:
      - name: Decode SSH keys
        run: |
          mkdir /home/runner/.ssh
          echo "$SSH_PRIVATE_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine
          echo "$SSH_PUBLIC_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine.pub
          chmod 600 ~/.ssh/google_compute_engine
          chmod 644 ~/.ssh/google_compute_engine.pub
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Stop docker containers
        run: |
          gcloud compute ssh a100-cuda118 --zone us-central1-b --command "docker stop \$(docker ps -q)"

  gcp-deploy-llm:
    needs: gcp-stop-test-orch
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Decode SSH keys
        run: |
          mkdir /home/runner/.ssh
          echo "$SSH_PRIVATE_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine
          echo "$SSH_PUBLIC_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine.pub
          chmod 600 ~/.ssh/google_compute_engine
          chmod 644 ~/.ssh/google_compute_engine.pub
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Start LLM server
        run: gcloud compute ssh a100-cuda118 --zone us-central1-b --command "docker run -d --gpus all --runtime=nvidia -p ${{ secrets.PORT_LLM }}:${{ secrets.PORT_LLM }} corcelio/cicd:llm-server-${{ github.run_id }}"
        env:
          PORT_LLM: ${{ secrets.PORT_LLM }}  

      - name: Wait for LLM server to be ready
        run: |
          gcloud compute ssh a100-cuda118 --zone us-central1-b --command "\
          until curl --connect-timeout 0 --max-time 0 -v localhost:${{ secrets.PORT_LLM }}/docs; do \
            echo 'Waiting for the LLM server to be ready...'; \
            sleep 10; \
          done; \
          echo 'LLM server is ready!'"
        env:
          PORT_LLM: ${{ secrets.PORT_LLM }}
        timeout-minutes: 15
  
  gcp-test-llm:
    needs: gcp-deploy-llm
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Decode SSH keys
        run: |
          mkdir /home/runner/.ssh
          echo "$SSH_PRIVATE_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine
          echo "$SSH_PUBLIC_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine.pub
          chmod 600 ~/.ssh/google_compute_engine
          chmod 644 ~/.ssh/google_compute_engine.pub
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      
      - name: Copy json data for query
        run: gcloud compute scp --recurse /home/runner/work/vision-workers/vision-workers/ci-tests/load_model_small.json a100-cuda118:/home/runner/load_model_small.json --zone us-central1-b
      
      - name: Test gcp LLM server - load small model
        uses: nick-fields/retry@v3
        with:
          max_attempts: 3
          retry_on: timeout
          timeout_minutes: 15
          command: |
            gcloud compute ssh a100-cuda118 --zone us-central1-b --command "\
              curl --connect-timeout 0 --max-time 0 -v -X POST localhost:${{ secrets.PORT_LLM }}/load_model \
              -H 'Content-Type: application/json' \
              --data-binary @/home/runner/load_model_small.json"
        env:
          PORT_LLM: ${{ secrets.PORT_LLM }}
      
      - name: Copy json data for query
        run: gcloud compute scp --recurse /home/runner/work/vision-workers/vision-workers/ci-tests/query_llm.json a100-cuda118:/home/runner/query_llm.json --zone us-central1-b

      - name: Test gcp LLM server - query model
        uses: nick-fields/retry@v3
        with:
          max_attempts: 3
          retry_on: timeout
          timeout_minutes: 15
          command: |
            gcloud compute ssh a100-cuda118 --zone us-central1-b --command "\
              curl --connect-timeout 0 --max-time 0 -v -X POST localhost:${{ secrets.PORT_LLM }}/generate_text \
              -H 'Content-Type: application/json' \
              --data-binary @/home/runner/query_llm.json"
        env:
          PORT_LLM: ${{ secrets.PORT_LLM }}
      
  gcp-stop-test-llm:
    needs: gcp-test-llm
    runs-on: ubuntu-latest
    steps:
      - name: Decode SSH keys
        run: |
          mkdir /home/runner/.ssh
          echo "$SSH_PRIVATE_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine
          echo "$SSH_PUBLIC_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine.pub
          chmod 600 ~/.ssh/google_compute_engine
          chmod 644 ~/.ssh/google_compute_engine.pub
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Stop docker containers
        run: |
          gcloud compute ssh a100-cuda118 --zone us-central1-b --command "docker stop \$(docker ps -q)"

  gcp-deploy-image:
    needs: gcp-stop-test-llm
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Decode SSH keys
        run: |
          mkdir /home/runner/.ssh
          echo "$SSH_PRIVATE_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine
          echo "$SSH_PUBLIC_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine.pub
          chmod 600 ~/.ssh/google_compute_engine
          chmod 644 ~/.ssh/google_compute_engine.pub
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      
      - name: Start Image server
        run: gcloud compute ssh a100-cuda118 --zone us-central1-b --command "docker run -d --gpus all --runtime=nvidia -p ${{ secrets.PORT_LLM }}:${{ secrets.PORT_LLM }} corcelio/cicd:image-server-${{ github.run_id }}"
        env:
          PORT_LLM: ${{ secrets.PORT_LLM }}  

      - name: Wait for Image server to be ready
        run: |
          gcloud compute ssh a100-cuda118 --zone us-central1-b --command "\
          until curl --connect-timeout 0 --max-time 0 -v localhost:${{ secrets.PORT_LLM }}/docs; do \
            echo 'Waiting for the Image server to be ready...'; \
            sleep 10; \
          done; \
          echo 'Image server is ready!'"
        env:
          PORT_LLM: ${{ secrets.PORT_LLM }}
        timeout-minutes: 15

  gcp-test-image:
    needs: gcp-deploy-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Decode SSH keys
        run: |
          mkdir /home/runner/.ssh
          echo "$SSH_PRIVATE_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine
          echo "$SSH_PUBLIC_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine.pub
          chmod 600 ~/.ssh/google_compute_engine
          chmod 644 ~/.ssh/google_compute_engine.pub
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Copy json data for query
        run: gcloud compute scp --recurse /home/runner/work/vision-workers/vision-workers/ci-tests/image-server-test.json a100-cuda118:/home/runner/image-server-test.json --zone us-central1-b
      
      - name: Test gcp Image server
        uses: nick-fields/retry@v3
        with:
          max_attempts: 3
          retry_on: timeout
          timeout_minutes: 15
          command: |
            gcloud compute ssh a100-cuda118 --zone us-central1-b --command "\
              curl --connect-timeout 0 --max-time 0 -v -X POST localhost:${{ secrets.PORT_LLM }}/txt2img \
              -H 'Content-Type: application/json' \
              --data-binary @/home/runner/image-server-test.json"
        env:
          PORT_LLM: ${{ secrets.PORT_LLM }}
  
  gcp-test-image-avatar:
    needs: gcp-test-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Decode SSH keys
        run: |
          mkdir /home/runner/.ssh
          echo "$SSH_PRIVATE_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine
          echo "$SSH_PUBLIC_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine.pub
          chmod 600 ~/.ssh/google_compute_engine
          chmod 644 ~/.ssh/google_compute_engine.pub
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Copy json data for query
        run: gcloud compute scp --recurse /home/runner/work/vision-workers/vision-workers/ci-tests/avatar-test.json a100-cuda118:/home/runner/avatar-test.json --zone us-central1-b
      
      - name: Test gcp Image server - Avatar
        uses: nick-fields/retry@v3
        with:
          max_attempts: 3
          retry_on: timeout
          timeout_minutes: 15
          command: |
            gcloud compute ssh a100-cuda118 --zone us-central1-b --command "\
              curl --connect-timeout 0 --max-time 0 -v -X POST localhost:${{ secrets.PORT_LLM }}/avatar \
              -H 'Content-Type: application/json' \
              --data-binary @/home/runner/avatar-test.json"
        env:
          PORT_LLM: ${{ secrets.PORT_LLM }}
  
  gcp-stop-test-image:
    needs: gcp-test-image-avatar
    runs-on: ubuntu-latest
    steps:
      - name: Decode SSH keys
        run: |
          mkdir /home/runner/.ssh
          echo "$SSH_PRIVATE_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine
          echo "$SSH_PUBLIC_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine.pub
          chmod 600 ~/.ssh/google_compute_engine
          chmod 644 ~/.ssh/google_compute_engine.pub
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Stop docker containers
        run: |
          gcloud compute ssh a100-cuda118 --zone us-central1-b --command "docker stop \$(docker ps -q)"
  
  runpod-deploy-orchestrator:
    if: needs.deploy-runpod-jobs.outputs.runPodEnabled == 'true'
    needs: deploy-runpod-jobs
    runs-on: ubuntu-latest
    outputs:
      instance_id: ${{ steps.deploy-orch.outputs.instance_id }}
    steps:
      - name: Deploy to Runpod
        id: deploy-orch
        run: |
          response=$(curl --connect-timeout 0 --max-time 0 --retry 5 -X POST https://runpod-manager.onrender.com/create-instance \
                          -H "Content-Type: application/json" \
                          -H "API_KEY: ${{ secrets.RUNPOD_MANAGER_API_KEY }}" \
                          -d '{
                            "instance_name": "v-workers-cicd-orch-${{ github.run_id }}",
                            "gpu_type": "${{ secrets.RUNPOD_GPU_TYPE }}",
                            "disk_volume": 500,
                            "docker_image": "corcelio/cicd:orchestrator-${{ github.run_id }}",
                            "ports": "${{ secrets.PORT_ORCH }}/http",
                            "cuda_versions": [
                              "11.8",
                              "12.0",
                              "12.1",
                              "12.2",
                              "12.3"
                            ],
                            "env_vars": {}
                          }')
          instance_id=$(echo "$response" | jq -r '.id')
          echo "::set-output name=instance_id::$instance_id"
        timeout-minutes: 30
      
      - name: Wait until server up
        run: |
          until curl --connect-timeout 0 --max-time 0 https://${{ needs.runpod-deploy-orchestrator.outputs.instance_id }}-${{ secrets.PORT_ORCH }}.proxy.runpod.net/docs; do
            echo 'Waiting for the runpod orchestrator instance to be ready...'
            sleep 10
          done
          echo 'Instance is ready!'
        timeout-minutes: 30
        
  runpod-test-orch-llm:
    needs: runpod-deploy-orchestrator
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Test Runpod Orchestrator - LLM
        uses: nick-fields/retry@v3
        with:
          max_attempts: 10
          retry_on: timeout
          timeout_minutes: 3
          command: |
            curl --connect-timeout 0 --max-time 0 -v -f -X POST https://${{ needs.runpod-deploy-orchestrator.outputs.instance_id }}-${{ secrets.PORT_ORCH }}.proxy.runpod.net/check-result \
                  -H "Content-Type: application/json" \
                  --data-binary @/home/runner/work/vision-workers/vision-workers/ci-tests/orch_llm.json
    outputs:
      instance_id: ${{ needs.runpod-deploy-orchestrator.outputs.instance_id }}
  
  runpod-test-orch-image:
    needs: runpod-test-orch-llm
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Test Runpod Orchestrator - Image
        uses: nick-fields/retry@v3
        with:
          max_attempts: 10
          retry_on: timeout
          timeout_minutes: 3
          command: |
            curl --connect-timeout 0 --max-time 0 -v -f -X POST https://${{ needs.runpod-test-orch-llm.outputs.instance_id }}-${{ secrets.PORT_ORCH }}.proxy.runpod.net/check-result \
                  -H "Content-Type: application/json" \
                  --data-binary @/home/runner/work/vision-workers/vision-workers/ci-tests/orch-image-txt2img.json
    outputs:
      instance_id: ${{ needs.runpod-test-orch-llm.outputs.instance_id }}

  runpod-destroy-orch:
    needs: runpod-test-orch-image
    runs-on: ubuntu-latest
    steps:
      - name: Destroy Orchestrator runpod instance
        uses: nick-fields/retry@v3
        with: 
          max_attempts: 5
          retry_on: timeout
          timeout_minutes: 1
          command: |
            curl --connect-timeout 0 --max-time 0 -v -X DELETE https://runpod-manager.onrender.com/delete-instance/${{ needs.runpod-test-orch-avatar.outputs.instance_id }} \
                -H "API_KEY: ${{ secrets.RUNPOD_MANAGER_API_KEY }}"
        timeout-minutes: 1

  runpod-deploy-llm-server:
    if: needs.deploy-runpod-jobs.outputs.runPodEnabled == 'true'
    needs: deploy-runpod-jobs
    runs-on: ubuntu-latest
    outputs:
      instance_id: ${{ steps.deploy-orch.outputs.instance_id }}
    steps:
      - name: Deploy to Runpod
        id: deploy-orch
        run: |
          sleep 5
          response=$(curl --connect-timeout 0 --max-time 0 --retry 5 -X POST https://runpod-manager.onrender.com/create-instance \
                          -H "Content-Type: application/json" \
                          -H "API_KEY: ${{ secrets.RUNPOD_MANAGER_API_KEY }}" \
                          -d '{
                            "instance_name": "v-workers-cicd-llm-${{ github.run_id }}",
                            "gpu_type": "${{ secrets.RUNPOD_GPU_TYPE }}",
                            "disk_volume": 500,
                            "docker_image": "corcelio/cicd:llm-server-${{ github.run_id }}",
                            "ports": "${{ secrets.PORT_LLM }}/http",
                            "cuda_versions": [
                              "11.8",
                              "12.0",
                              "12.1",
                              "12.2",
                              "12.3"
                            ],
                            "env_vars": {}
                          }')
          instance_id=$(echo "$response" | jq -r '.id')
          echo "::set-output name=instance_id::$instance_id"
        timeout-minutes: 30
      
      - name: Wait until server up
        run: |
          until curl --connect-timeout 0 --max-time 0 https://${{ needs.runpod-deploy-llm-server.outputs.instance_id }}-${{ secrets.PORT_LLM }}.proxy.runpod.net/docs; do
            echo 'Waiting for the runpod LLM server instance to be ready...'
            sleep 10
          done
          echo 'Instance is ready!'
        timeout-minutes: 30

  runpod-test-llm:
    needs: runpod-deploy-llm-server
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Load model
        timeout-minutes: 20
        run: |
          curl --connect-timeout 0 --max-time 0 -v -f -X POST https://${{ needs.runpod-deploy-llm-server.outputs.instance_id }}-${{ secrets.PORT_LLM }}.proxy.runpod.net/load_model \
                  -H "Content-Type: application/json" \
                  --data-binary @/home/runner/work/vision-workers/vision-workers/ci-tests/load_model.json

      - name: Test Runpod LLM
        uses: nick-fields/retry@v3
        with:
          max_attempts: 15
          retry_on: timeout
          timeout_minutes: 2
          command: |
            curl --connect-timeout 0 --max-time 0 -v -X POST https://${{ needs.runpod-deploy-llm-server.outputs.instance_id }}-${{ secrets.PORT_LLM }}.proxy.runpod.net/generate_text \
                  -H "Content-Type: application/json" \
                  --data-binary @/home/runner/work/vision-workers/vision-workers/ci-tests/query_llm.json

    outputs:
      instance_id: ${{ needs.runpod-deploy-llm-server.outputs.instance_id }}

  runpod-destroy-llm:
    needs: runpod-test-llm
    runs-on: ubuntu-latest
    steps:
      - name: Destroy Orchestrator runpod instance
        uses: nick-fields/retry@v3
        with: 
          max_attempts: 5
          retry_on: timeout
          timeout_minutes: 1
          command: |
            curl --connect-timeout 0 --max-time 0 -v -X DELETE https://runpod-manager.onrender.com/delete-instance/${{ needs.runpod-test-llm.outputs.instance_id }} \
                -H "API_KEY: ${{ secrets.RUNPOD_MANAGER_API_KEY }}"
        timeout-minutes: 1

  runpod-deploy-image-server:
    if: needs.deploy-runpod-jobs.outputs.runPodEnabled == 'true'
    needs: deploy-runpod-jobs
    runs-on: ubuntu-latest
    outputs:
      instance_id: ${{ steps.deploy-orch.outputs.instance_id }}
    steps:
      - name: Deploy to Runpod
        id: deploy-orch
        run: |
          sleep 10
          response=$(curl --connect-timeout 0 --max-time 0 --retry 5 -X POST https://runpod-manager.onrender.com/create-instance \
                          -H "Content-Type: application/json" \
                          -H "API_KEY: ${{ secrets.RUNPOD_MANAGER_API_KEY }}" \
                          -d '{
                            "instance_name": "v-workers-cicd-img-${{ github.run_id }}",
                            "gpu_type": "${{ secrets.RUNPOD_GPU_TYPE }}",
                            "disk_volume": 500,
                            "docker_image": "corcelio/cicd:image-server-${{ github.run_id }}",
                            "ports": "${{ secrets.PORT_LLM }}/http",
                            "cuda_versions": [
                              "11.8",
                              "12.0",
                              "12.1",
                              "12.2",
                              "12.3"
                            ],
                            "env_vars": {}
                          }')
          instance_id=$(echo "$response" | jq -r '.id')
          echo "::set-output name=instance_id::$instance_id"
        timeout-minutes: 30

      - name: Wait until server up
        run: |
          until curl --connect-timeout 0 --max-time 0 https://${{ needs.runpod-deploy-image-server.outputs.instance_id }}-${{ secrets.PORT_LLM }}.proxy.runpod.net/docs; do
            echo 'Waiting for the runpod LLM server instance to be ready...'
            sleep 10
          done
          echo 'Instance is ready!'
        timeout-minutes: 30
  
  runpod-test-image:
    needs: runpod-deploy-image-server
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Test Runpod Image
        uses: nick-fields/retry@v3
        with:
          max_attempts: 9
          retry_on: timeout
          timeout_minutes: 5
          command: |
            curl --connect-timeout 0 --max-time 0 -v -X POST https://${{ needs.runpod-deploy-image-server.outputs.instance_id }}-${{ secrets.PORT_LLM }}.proxy.runpod.net/txt2img \
                -H "Content-Type: application/json" \
                --data-binary @/home/runner/work/vision-workers/vision-workers/ci-tests/image-server-test.json
    outputs:
      instance_id: ${{ needs.runpod-deploy-image-server.outputs.instance_id }}

  runpod-destroy-image:
    needs: runpod-test-image
    runs-on: ubuntu-latest
    steps:
      - name: Destroy Image runpod instance
        uses: nick-fields/retry@v3
        with: 
          max_attempts: 5
          retry_on: timeout
          timeout_minutes: 1
          command: |
            curl --connect-timeout 0 --max-time 0 -v -X DELETE https://runpod-manager.onrender.com/delete-instance/${{ needs.runpod-test-image.outputs.instance_id }} \
               -H "API_KEY: ${{ secrets.RUNPOD_MANAGER_API_KEY }}"
        timeout-minutes: 1

