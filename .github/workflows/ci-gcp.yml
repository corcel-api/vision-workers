name: Build, deploy & test - GCP & Runpod

on:
  push:
  pull_request:

jobs:
  set-config:
    runs-on: ubuntu-latest
    outputs:
      gcp-workflow: ${{ steps.read_config.outputs.gcp-workflow }}
      gcp-gpu-name: ${{ steps.read_config.outputs.gcp-gpu-name }}
      gcp-gpu-zone: ${{ steps.read_config.outputs.gcp-gpu-zone }}
      orchestrator-port: ${{ steps.read_config.outputs.orchestrator-port }}
      llm-server-port: ${{ steps.read_config.outputs.llm-server-port }}
      image-server-port: ${{ steps.read_config.outputs.image-server-port }}
      test-json-folder: ${{ steps.read_config.outputs.test-json-folder }}
      gcp-test-orch-text2image: ${{ steps.read_config.outputs.gcp-test-orch-text2image }}
      gcp-test-orch-avatar: ${{ steps.read_config.outputs.gcp-test-orch-avatar }}
      gcp-test-llm-load-model: ${{ steps.read_config.outputs.gcp-test-llm-load-model }}
      gcp-test-llm-query-model: ${{ steps.read_config.outputs.gcp-test-llm-query-model }}
      gcp-test-image-text2image: ${{ steps.read_config.outputs.gcp-test-image-text2image }}
      gcp-test-image-avatar: ${{ steps.read_config.outputs.gcp-test-image-avatar }}
      runpod-workflow: ${{ steps.read_config.outputs.runpod-workflow }}
      runpod-gpu-type: ${{ steps.read_config.outputs.runpod-gpu-type }}
      runpod-test-orch-text2image: ${{ steps.read_config.outputs.runpod-test-orch-text2image }}
      runpod-test-orch-llm: ${{ steps.read_config.outputs.runpod-test-orch-llm }}
      runpod-test-llm-load-model: ${{ steps.read_config.outputs.runpod-test-llm-load-model }}
      runpod-test-llm-query-model: ${{ steps.read_config.outputs.runpod-test-llm-query-model }}
      runpod-test-image-text2image: ${{ steps.read_config.outputs.runpod-test-image-text2image }}
      runpod-test-image-avatar: ${{ steps.read_config.outputs.runpod-test-image-avatar }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Read cicd config file
        id: read_config
        run: |
          CONFIG_CONTENT=$(cat cicd_config.json)
          GCP_ENABLED=$(echo $CONFIG_CONTENT | jq '.gcp-workflow')
          echo "GCP_ENABLED=$GCP_ENABLED" >> $GITHUB_ENV
          echo "::set-output name=gcp-workflow::$GCP_ENABLED"

          GCP_GPU_NAME=$(echo $CONFIG_CONTENT | jq '.gcp-gpu-name')
          echo "GCP_GPU_NAME=$GCP_GPU_NAME" >> $GITHUB_ENV
          echo "::set-output name=gcp-gpu-name::$GCP_GPU_NAME"

          GCP_GPU_ZONE=$(echo $CONFIG_CONTENT | jq '.gcp-gpu-zone')
          echo "GCP_GPU_ZONE=$GCP_GPU_ZONE" >> $GITHUB_ENV
          echo "::set-output name=gcp-gpu-zone::$GCP_GPU_ZONE"

          ORCH_PORT=$(echo $CONFIG_CONTENT | jq '.orchestrator-port')
          echo "ORCH_PORT=$ORCH_PORT" >> $GITHUB_ENV
          echo "::set-output name=orchestrator-port::$ORCH_PORT"

          LLM_PORT=$(echo $CONFIG_CONTENT | jq '.llm-server-port')
          echo "LLM_PORT=$LLM_PORT" >> $GITHUB_ENV
          echo "::set-output name=llm-server-port::$LLM_PORT"

          IMAGE_PORT=$(echo $CONFIG_CONTENT | jq '.image-server-port')
          echo "IMAGE_PORT=$IMAGE_PORT" >> $GITHUB_ENV
          echo "::set-output name=image-server-port::$IMAGE_PORT"

          TEST_JSON_FOLDER=$(echo $CONFIG_CONTENT | jq '.test-json-folder')
          echo "TEST_JSON_FOLDER=$TEST_JSON_FOLDER" >> $GITHUB_ENV
          echo "::set-output name=test-json-folder::$TEST_JSON_FOLDER"

          TEST_GCP_ORCH_TXT2IMG=$(echo $CONFIG_CONTENT | jq '.gcp-test-orch-text2image')
          echo "TEST_GCP_ORCH_TXT2IMG=$TEST_GCP_ORCH_TXT2IMG" >> $GITHUB_ENV
          echo "::set-output name=gcp-test-orch-text2image::$TEST_GCP_ORCH_TXT2IMG"

          TEST_GCP_ORCH_AVATAR=$(echo $CONFIG_CONTENT | jq '.gcp-test-orch-avatar')
          echo "TEST_GCP_ORCH_AVATAR=$TEST_GCP_ORCH_AVATAR" >> $GITHUB_ENV
          echo "::set-output name=gcp-test-orch-avatar::$TEST_GCP_ORCH_AVATAR"

          TEST_GCP_LLM_LOAD=$(echo $CONFIG_CONTENT | jq '.gcp-test-llm-load-model')
          echo "TEST_GCP_LLM_LOAD=$TEST_GCP_LLM_LOAD" >> $GITHUB_ENV
          echo "::set-output name=gcp-test-llm-load-model::$TEST_GCP_LLM_LOAD"
          
          TEST_GCP_LLM_QUERY=$(echo $CONFIG_CONTENT | jq '.gcp-test-llm-query-model')
          echo "TEST_GCP_LLM_QUERY=$TEST_GCP_LLM_QUERY" >> $GITHUB_ENV
          echo "::set-output name=gcp-test-llm-query-model::$TEST_GCP_LLM_QUERY"

          TEST_GCP_IMAGE_TXT2IMG=$(echo $CONFIG_CONTENT | jq '.gcp-test-image-text2image')
          echo "TEST_GCP_IMAGE_TXT2IMG=$TEST_GCP_IMAGE_TXT2IMG" >> $GITHUB_ENV
          echo "::set-output name=gcp-test-image-text2image::$TEST_GCP_IMAGE_TXT2IMG"

          TEST_GCP_IMAGE_AVATAR=$(echo $CONFIG_CONTENT | jq '.gcp-test-image-avatar')
          echo "TEST_GCP_IMAGE_AVATAR=$TEST_GCP_IMAGE_AVATAR" >> $GITHUB_ENV
          echo "::set-output name=gcp-test-image-avatar::$TEST_GCP_IMAGE_AVATAR"

          RUNPOD_ENABLED=$(echo $CONFIG_CONTENT | jq '.runpod-workflow')
          echo "RUNPOD_ENABLED=$RUNPOD_ENABLED" >> $GITHUB_ENV
          echo "::set-output name=runpod-workflow::$RUNPOD_ENABLED"

          RUNPOD_GPU_TYPE=$(echo $CONFIG_CONTENT | jq '.runpod-gpu-type')
          echo "RUNPOD_GPU_TYPE=$RUNPOD_GPU_TYPE" >> $GITHUB_ENV
          echo "::set-output name=runpod-gpu-type::$RUNPOD_GPU_TYPE"
          
          RUNPOD_TEST_ORCH_TXT2IMG=$(echo $CONFIG_CONTENT | jq '.runpod-test-orch-text2image')
          echo "RUNPOD_TEST_ORCH_TXT2IMG=$RUNPOD_TEST_ORCH_TXT2IMG" >> $GITHUB_ENV
          echo "::set-output name=runpod-test-orch-text2image::$RUNPOD_TEST_ORCH_TXT2IMG"

          RUNPOD_TEST_ORCH_LLM=$(echo $CONFIG_CONTENT | jq '.runpod-test-orch-llm')
          echo "RUNPOD_TEST_ORCH_LLM=$RUNPOD_TEST_ORCH_LLM" >> $GITHUB_ENV
          echo "::set-output name=runpod-test-orch-llm::$RUNPOD_TEST_ORCH_LLM"

          RUNPOD_TEST_LLM_LOAD=$(echo $CONFIG_CONTENT | jq '.runpod-test-llm-load-model')
          echo "RUNPOD_TEST_LLM_LOAD=$RUNPOD_TEST_LLM_LOAD" >> $GITHUB_ENV
          echo "::set-output name=runpod-test-llm-load-model::$RUNPOD_TEST_LLM_LOAD"

          RUNPOD_TEST_LLM_QUERY=$(echo $CONFIG_CONTENT | jq '.runpod-test-llm-query-model')
          echo "RUNPOD_TEST_LLM_QUERY=$RUNPOD_TEST_LLM_QUERY" >> $GITHUB_ENV
          echo "::set-output name=runpod-test-llm-query-model::$RUNPOD_TEST_LLM_QUERY"

          RUNPOD_TEST_IMAGE_TXT2IMG=$(echo $CONFIG_CONTENT | jq '.runpod-test-image-text2image')
          echo "RUNPOD_TEST_IMAGE_TXT2IMG=$RUNPOD_TEST_IMAGE_TXT2IMG" >> $GITHUB_ENV
          echo "::set-output name=runpod-test-image-text2image::$RUNPOD_TEST_IMAGE_TXT2IMG"

          RUNPOD_TEST_IMAGE_AVATAR=$(echo $CONFIG_CONTENT | jq '.runpod-test-image-avatar')
          echo "RUNPOD_TEST_IMAGE_AVATAR=$RUNPOD_TEST_IMAGE_AVATAR" >> $GITHUB_ENV
          echo "::set-output name=runpod-test-image-avatar::$RUNPOD_TEST_IMAGE_AVATAR"


  build-all:
    needs: set-config
    outputs: 
      gcp-workflow: ${{ needs.set-config.outputs.gcp-workflow }}
      runpod-workflow: ${{ needs.set-config.outputs.runpod-workflow }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Decode SSH keys
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
        run: |
          mkdir /home/runner/.ssh
          echo "$SSH_PRIVATE_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine
          echo "$SSH_PUBLIC_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine.pub
          chmod 600 ~/.ssh/google_compute_engine
          chmod 644 ~/.ssh/google_compute_engine.pub

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      
      - name: Wait for Instance to be Ready
        run: |
          until gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "echo 'Instance is up'"; do
            echo 'Waiting for the instance to be ready...'
            sleep 10
          done
          echo 'Instance is ready!'

      - name: Clear remote directory
        run: gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "rm -rf /home/runner/*"

      - name: Copy updated repository to remote server
        run: gcloud compute scp --recurse /home/runner/work/vision-workers/vision-workers ${{ env.GCP_GPU_NAME }}:/home/runner/vision-workers --zone ${{ env.GCP_GPU_ZONE }}
      
      - name: Run script on remote server
        run: gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "export PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}; export BUILD_ID=${{ github.run_id }}; docker login --username=${{ secrets.DOCKER_USER }} --password=${{ secrets.DOCKER_PASSW }}; cd /home/runner/vision-workers && chmod +x ./build-docker-ci-remote.sh && bash ./build-docker-ci-remote.sh"
        env:
          PROJECT_ID: ${{ secrets.PROJECT_ID }}
          BUILD_ID: ${{ github.run_id }}
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASSW: ${{ secrets.DOCKER_PASSW }}

  deploy-gcp-jobs:  
    if: needs.build-all.outputs.gcp-workflow == 'true'
    needs: build-all
    runs-on: ubuntu-latest
    steps:
      - name: Placeholder Step
        run: echo "This is a placeholder step"

  deploy-runpod-jobs:
    if: needs.build-all.outputs.runpod-workflow == 'true'
    needs: build-all
    runs-on: ubuntu-latest
    steps:
      - name: Placeholder Step
        run: echo "This is a placeholder step"

  gcp-deploy-orchestrator:
    needs: deploy-gcp-jobs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Decode SSH keys
        run: |
          mkdir /home/runner/.ssh
          echo "$SSH_PRIVATE_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine
          echo "$SSH_PUBLIC_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine.pub
          chmod 600 ~/.ssh/google_compute_engine
          chmod 644 ~/.ssh/google_compute_engine.pub
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Start orchestrator server
        run: gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "docker run -d --gpus all --runtime=nvidia -p ${{ env.ORCH_PORT }}:${{ env.ORCH_PORT }} -p ${{ env.LLM_PORT }}:${{ env.LLM_PORT }} corcelio/cicd:orchestrator-${{ github.run_id }}"
        env:
          PORT_ORCH: ${{ env.ORCH_PORT }}  
          LLM_PORT: ${{ env.LLM_PORT }}  

      - name: Wait for Orchestrator to be ready
        run: |
          gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "\
          until curl --connect-timeout 0 --max-time 0 localhost:${{ env.ORCH_PORT }}/docs; do \
            echo 'Waiting for the Orchestrator to be ready...'; \
            sleep 10; \
          done; \
          echo 'Orchestrator is ready!'"
        env:
          PORT_ORCH: ${{ env.ORCH_PORT }}
        timeout-minutes: 15

  gcp-test-orchestrator-image:
    needs: gcp-deploy-orchestrator
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Decode SSH keys
        run: |
          mkdir /home/runner/.ssh
          echo "$SSH_PRIVATE_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine
          echo "$SSH_PUBLIC_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine.pub
          chmod 600 ~/.ssh/google_compute_engine
          chmod 644 ~/.ssh/google_compute_engine.pub
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Copy json data for query
        run: gcloud compute scp --recurse /home/runner/work/vision-workers/vision-workers/${{ env.TEST_JSON_FOLDER }}/${{ env.TEST_GCP_ORCH_TXT2IMG }} ${{ env.GCP_GPU_NAME }}:/home/runner/${{ env.TEST_GCP_ORCH_TXT2IMG }} --zone ${{ env.GCP_GPU_ZONE }}
      
      - name: Test gcp Orchestrator - Image
        uses: nick-fields/retry@v3
        with:
          max_attempts: 3
          retry_on: timeout
          timeout_minutes: 15
          command: |
            gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "\
              curl --connect-timeout 0 --max-time 0 -X POST localhost:${{ env.ORCH_PORT }}/check-result \
              -H 'Content-Type: application/json' \
              --data-binary @/home/runner/${{ env.TEST_GCP_ORCH_TXT2IMG }}"
        env:
          PORT_ORCH: ${{ env.ORCH_PORT }}
    
  gcp-test-orchestrator-avatar:
    needs: gcp-test-orchestrator-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Decode SSH keys
        run: |
          mkdir /home/runner/.ssh
          echo "$SSH_PRIVATE_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine
          echo "$SSH_PUBLIC_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine.pub
          chmod 600 ~/.ssh/google_compute_engine
          chmod 644 ~/.ssh/google_compute_engine.pub
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Copy json data to remote
        run: gcloud compute scp --recurse /home/runner/work/vision-workers/vision-workers/${{ env.TEST_JSON_FOLDER }}/${{ env.TEST_GCP_ORCH_AVATAR }} ${{ env.GCP_GPU_NAME }}:/home/runner/${{ env.TEST_GCP_ORCH_AVATAR }} --zone ${{ env.GCP_GPU_ZONE }}
      
      - name: Test gcp Orchestrator - Image - Avatar
        uses: nick-fields/retry@v3
        with:
          max_attempts: 3
          retry_on: timeout
          timeout_minutes: 15
          command: |
            gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "\
              curl --connect-timeout 0 --max-time 0 -v -X POST localhost:${{ env.IMAGE_PORT }}/avatar \
              -H 'Content-Type: application/json' \
              --data-binary @/home/runner/${{ env.TEST_GCP_ORCH_AVATAR }}"
        env:
          LLM_PORT: ${{ env.IMAGE_PORT }}

  gcp-stop-test-orch:
    needs: gcp-test-orchestrator-avatar
    runs-on: ubuntu-latest
    steps:
      - name: Decode SSH keys
        run: |
          mkdir /home/runner/.ssh
          echo "$SSH_PRIVATE_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine
          echo "$SSH_PUBLIC_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine.pub
          chmod 600 ~/.ssh/google_compute_engine
          chmod 644 ~/.ssh/google_compute_engine.pub
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Stop docker containers
        run: |
          gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "docker stop \$(docker ps -q)"

  gcp-deploy-llm:
    needs: gcp-stop-test-orch
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Decode SSH keys
        run: |
          mkdir /home/runner/.ssh
          echo "$SSH_PRIVATE_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine
          echo "$SSH_PUBLIC_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine.pub
          chmod 600 ~/.ssh/google_compute_engine
          chmod 644 ~/.ssh/google_compute_engine.pub
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Start LLM server
        run: gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "docker run -d --gpus all --runtime=nvidia -p ${{ env.LLM_PORT }}:${{ env.LLM_PORT }} corcelio/cicd:llm-server-${{ github.run_id }}"
        env:
          LLM_PORT: ${{ env.LLM_PORT }}  

      - name: Wait for LLM server to be ready
        run: |
          gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "\
          until curl --connect-timeout 0 --max-time 0 -v localhost:${{ env.LLM_PORT }}/docs; do \
            echo 'Waiting for the LLM server to be ready...'; \
            sleep 10; \
          done; \
          echo 'LLM server is ready!'"
        env:
          LLM_PORT: ${{ env.LLM_PORT }}
        timeout-minutes: 15
  
  gcp-test-llm:
    needs: gcp-deploy-llm
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Decode SSH keys
        run: |
          mkdir /home/runner/.ssh
          echo "$SSH_PRIVATE_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine
          echo "$SSH_PUBLIC_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine.pub
          chmod 600 ~/.ssh/google_compute_engine
          chmod 644 ~/.ssh/google_compute_engine.pub
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      
      - name: Copy json data for query
        run: gcloud compute scp --recurse /home/runner/work/vision-workers/vision-workers/${{ env.TEST_JSON_FOLDER }}/${{ env.TEST_GCP_LLM_LOAD }} ${{ env.GCP_GPU_NAME }}:/home/runner/${{ env.TEST_GCP_LLM_LOAD }} --zone ${{ env.GCP_GPU_ZONE }}
      
      - name: Test gcp LLM server - load small model
        uses: nick-fields/retry@v3
        with:
          max_attempts: 3
          retry_on: timeout
          timeout_minutes: 15
          command: |
            gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "\
              curl --connect-timeout 0 --max-time 0 -v -X POST localhost:${{ env.LLM_PORT }}/load_model \
              -H 'Content-Type: application/json' \
              --data-binary @/home/runner/${{ env.TEST_GCP_LLM_LOAD }}"
        env:
          LLM_PORT: ${{ env.LLM_PORT }}
      
      - name: Copy json data for query
        run: gcloud compute scp --recurse /home/runner/work/vision-workers/vision-workers/${{ env.TEST_JSON_FOLDER }}/${{ env.TEST_GCP_LLM_QUERY }} ${{ env.GCP_GPU_NAME }}:/home/runner/${{ env.TEST_GCP_LLM_QUERY }} --zone ${{ env.GCP_GPU_ZONE }}

      - name: Test gcp LLM server - query model
        uses: nick-fields/retry@v3
        with:
          max_attempts: 3
          retry_on: timeout
          timeout_minutes: 15
          command: |
            gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "\
              curl --connect-timeout 0 --max-time 0 -v -X POST localhost:${{ env.LLM_PORT }}/generate_text \
              -H 'Content-Type: application/json' \
              --data-binary @/home/runner/${{ env.TEST_GCP_LLM_QUERY }}"
        env:
          LLM_PORT: ${{ env.LLM_PORT }}
      
  gcp-stop-test-llm:
    needs: gcp-test-llm
    runs-on: ubuntu-latest
    steps:
      - name: Decode SSH keys
        run: |
          mkdir /home/runner/.ssh
          echo "$SSH_PRIVATE_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine
          echo "$SSH_PUBLIC_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine.pub
          chmod 600 ~/.ssh/google_compute_engine
          chmod 644 ~/.ssh/google_compute_engine.pub
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Stop docker containers
        run: |
          gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "docker stop \$(docker ps -q)"

  gcp-deploy-image:
    needs: gcp-stop-test-llm
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Decode SSH keys
        run: |
          mkdir /home/runner/.ssh
          echo "$SSH_PRIVATE_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine
          echo "$SSH_PUBLIC_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine.pub
          chmod 600 ~/.ssh/google_compute_engine
          chmod 644 ~/.ssh/google_compute_engine.pub
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      
      - name: Start Image server
        run: gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "docker run -d --gpus all --runtime=nvidia -p ${{ env.IMAGE_PORT }}:${{ env.IMAGE_PORT }} corcelio/cicd:image-server-${{ github.run_id }}"
        env:
          IMAGE_PORT: ${{ env.IMAGE_PORT }}  

      - name: Wait for Image server to be ready
        run: |
          gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "\
          until curl --connect-timeout 0 --max-time 0 -v localhost:${{ env.IMAGE_PORT }}/docs; do \
            echo 'Waiting for the Image server to be ready...'; \
            sleep 10; \
          done; \
          echo 'Image server is ready!'"
        env:
          IMAGE_PORT: ${{ env.IMAGE_PORT }}
        timeout-minutes: 15

  gcp-test-image:
    needs: gcp-deploy-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Decode SSH keys
        run: |
          mkdir /home/runner/.ssh
          echo "$SSH_PRIVATE_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine
          echo "$SSH_PUBLIC_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine.pub
          chmod 600 ~/.ssh/google_compute_engine
          chmod 644 ~/.ssh/google_compute_engine.pub
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Copy json data for query
        run: gcloud compute scp --recurse /home/runner/work/vision-workers/vision-workers/${{ env.TEST_JSON_FOLDER }}/${{ env.TEST_GCP_IMAGE_TXT2IMG }} ${{ env.GCP_GPU_NAME }}:/home/runner/${{ env.TEST_GCP_IMAGE_TXT2IMG }} --zone ${{ env.GCP_GPU_ZONE }}
      
      - name: Test gcp Image server
        uses: nick-fields/retry@v3
        with:
          max_attempts: 3
          retry_on: timeout
          timeout_minutes: 15
          command: |
            gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "\
              curl --connect-timeout 0 --max-time 0 -v -X POST localhost:${{ env.IMAGE_PORT }}/txt2img \
              -H 'Content-Type: application/json' \
              --data-binary @/home/runner/${{ env.TEST_GCP_IMAGE_TXT2IMG }}"
        env:
          IMAGE_PORT: ${{ env.IMAGE_PORT }}
  
  gcp-test-image-avatar:
    needs: gcp-test-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Decode SSH keys
        run: |
          mkdir /home/runner/.ssh
          echo "$SSH_PRIVATE_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine
          echo "$SSH_PUBLIC_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine.pub
          chmod 600 ~/.ssh/google_compute_engine
          chmod 644 ~/.ssh/google_compute_engine.pub
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Copy json data for query
        run: gcloud compute scp --recurse /home/runner/work/vision-workers/vision-workers/${{ env.TEST_JSON_FOLDER }}/${{ env.TEST_GCP_IMAGE_AVATAR }} ${{ env.GCP_GPU_NAME }}:/home/runner/${{ env.TEST_GCP_IMAGE_AVATAR }} --zone ${{ env.GCP_GPU_ZONE }}
      
      - name: Test gcp Image server - Avatar
        uses: nick-fields/retry@v3
        with:
          max_attempts: 3
          retry_on: timeout
          timeout_minutes: 15
          command: |
            gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "\
              curl --connect-timeout 0 --max-time 0 -v -X POST localhost:${{ env.IMAGE_PORT }}/avatar \
              -H 'Content-Type: application/json' \
              --data-binary @/home/runner/${{ env.TEST_GCP_IMAGE_AVATAR }}"
        env:
          IMAGE_PORT: ${{ env.IMAGE_PORT }}
  
  gcp-stop-test-image:
    needs: gcp-test-image-avatar
    runs-on: ubuntu-latest
    steps:
      - name: Decode SSH keys
        run: |
          mkdir /home/runner/.ssh
          echo "$SSH_PRIVATE_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine
          echo "$SSH_PUBLIC_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine.pub
          chmod 600 ~/.ssh/google_compute_engine
          chmod 644 ~/.ssh/google_compute_engine.pub
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Stop docker containers
        run: |
          gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "docker stop \$(docker ps -q)"
  
  runpod-deploy-orchestrator:
    needs: deploy-runpod-jobs
    runs-on: ubuntu-latest
    outputs:
      instance_id: ${{ steps.deploy-orch.outputs.instance_id }}
    steps:
      - name: Deploy to Runpod
        id: deploy-orch
        run: |
          response=$(curl --connect-timeout 0 --max-time 0 --retry 5 -X POST https://runpod-manager.onrender.com/create-instance \
                          -H "Content-Type: application/json" \
                          -H "API_KEY: ${{ secrets.RUNPOD_MANAGER_API_KEY }}" \
                          -d '{
                            "instance_name": "v-workers-cicd-orch-${{ github.run_id }}",
                            "gpu_type": "${{ env.RUNPOD_GPU_TYPE }}",
                            "disk_volume": 500,
                            "docker_image": "corcelio/cicd:orchestrator-${{ github.run_id }}",
                            "ports": "${{ env.ORCH_PORT }}/http",
                            "cuda_versions": [
                              "11.8",
                              "12.0",
                              "12.1",
                              "12.2",
                              "12.3"
                            ],
                            "env_vars": {}
                          }')
          instance_id=$(echo "$response" | jq -r '.id')
          echo "::set-output name=instance_id::$instance_id"
        timeout-minutes: 30
        
  runpod-test-orch-llm:
    needs: runpod-deploy-orchestrator
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Test Runpod Orchestrator - LLM
        uses: nick-fields/retry@v3
        with:
          max_attempts: 10
          retry_on: timeout
          timeout_minutes: 3
          command: |
            curl --connect-timeout 0 --max-time 0 -v -f -X POST https://${{ needs.runpod-deploy-orchestrator.outputs.instance_id }}-${{ env.ORCH_PORT }}.proxy.runpod.net/check-result \
                  -H "Content-Type: application/json" \
                  --data-binary @/home/runner/work/vision-workers/vision-workers/${{ env.TEST_JSON_FOLDER }}/${{ env.RUNPOD_TEST_ORCH_LLM }}
    outputs:
      instance_id: ${{ needs.runpod-deploy-orchestrator.outputs.instance_id }}
  
  runpod-test-orch-image:
    needs: runpod-test-orch-llm
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Test Runpod Orchestrator - Image
        uses: nick-fields/retry@v3
        with:
          max_attempts: 10
          retry_on: timeout
          timeout_minutes: 3
          command: |
            curl --connect-timeout 0 --max-time 0 -v -f -X POST https://${{ needs.runpod-test-orch-llm.outputs.instance_id }}-${{ env.ORCH_PORT }}.proxy.runpod.net/check-result \
                  -H "Content-Type: application/json" \
                  --data-binary @/home/runner/work/vision-workers/vision-workers/${{ env.TEST_JSON_FOLDER }}/${{ env.RUNPOD_TEST_ORCH_TXT2IMG }}
    outputs:
      instance_id: ${{ needs.runpod-test-orch-llm.outputs.instance_id }}

  runpod-destroy-orch:
    needs: runpod-test-orch-image
    runs-on: ubuntu-latest
    steps:
      - name: Destroy Orchestrator runpod instance
        uses: nick-fields/retry@v3
        with: 
          max_attempts: 5
          retry_on: timeout
          timeout_minutes: 1
          command: |
            curl --connect-timeout 0 --max-time 0 -v -X DELETE https://runpod-manager.onrender.com/delete-instance/${{ needs.runpod-test-orch-image.outputs.instance_id }} \
                -H "API_KEY: ${{ secrets.RUNPOD_MANAGER_API_KEY }}"
        timeout-minutes: 1

  runpod-deploy-llm-server:
    needs: deploy-runpod-jobs
    runs-on: ubuntu-latest
    outputs:
      instance_id: ${{ steps.deploy-orch.outputs.instance_id }}
    steps:
      - name: Deploy to Runpod
        id: deploy-orch
        run: |
          sleep 5
          response=$(curl --connect-timeout 0 --max-time 0 --retry 5 -X POST https://runpod-manager.onrender.com/create-instance \
                          -H "Content-Type: application/json" \
                          -H "API_KEY: ${{ secrets.RUNPOD_MANAGER_API_KEY }}" \
                          -d '{
                            "instance_name": "v-workers-cicd-llm-${{ github.run_id }}",
                            "gpu_type": "${{ env.RUNPOD_GPU_TYPE }}",
                            "disk_volume": 500,
                            "docker_image": "corcelio/cicd:llm-server-${{ github.run_id }}",
                            "ports": "${{ env.LLM_PORT }}/http",
                            "cuda_versions": [
                              "11.8",
                              "12.0",
                              "12.1",
                              "12.2",
                              "12.3"
                            ],
                            "env_vars": {}
                          }')
          instance_id=$(echo "$response" | jq -r '.id')
          echo "::set-output name=instance_id::$instance_id"
        timeout-minutes: 30

  runpod-test-llm:
    needs: runpod-deploy-llm-server
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Load model
        timeout-minutes: 20
        run: |
          curl --connect-timeout 0 --max-time 0 -v -X POST https://${{ needs.runpod-deploy-llm-server.outputs.instance_id }}-${{ env.LLM_PORT }}.proxy.runpod.net/load_model \
                  -H "Content-Type: application/json" \
                  --data-binary @/home/runner/work/vision-workers/vision-workers/${{ env.TEST_JSON_FOLDER }}/${{ env.RUNPOD_TEST_LLM_LOAD }}

      - name: Test Runpod LLM
        uses: nick-fields/retry@v3
        with:
          max_attempts: 9
          timeout_minutes: 5
          command: |
            curl --connect-timeout 0 --max-time 0 -v -X POST https://${{ needs.runpod-deploy-llm-server.outputs.instance_id }}-${{ env.LLM_PORT }}.proxy.runpod.net/generate_text \
                  -H "Content-Type: application/json" \
                  --data-binary @/home/runner/work/vision-workers/vision-workers/${{ env.TEST_JSON_FOLDER }}/${{ env.RUNPOD_TEST_LLM_QUERY }}

    outputs:
      instance_id: ${{ needs.runpod-deploy-llm-server.outputs.instance_id }}

  runpod-destroy-llm:
    needs: runpod-test-llm
    runs-on: ubuntu-latest
    steps:
      - name: Destroy Orchestrator runpod instance
        uses: nick-fields/retry@v3
        with: 
          max_attempts: 5
          retry_on: timeout
          timeout_minutes: 1
          command: |
            curl --connect-timeout 0 --max-time 0 -v -X DELETE https://runpod-manager.onrender.com/delete-instance/${{ needs.runpod-test-llm.outputs.instance_id }} \
                -H "API_KEY: ${{ secrets.RUNPOD_MANAGER_API_KEY }}"
        timeout-minutes: 1

  runpod-deploy-image-server:
    needs: deploy-runpod-jobs
    runs-on: ubuntu-latest
    outputs:
      instance_id: ${{ steps.deploy-orch.outputs.instance_id }}
    steps:
      - name: Deploy to Runpod
        id: deploy-orch
        run: |
          sleep 10
          response=$(curl --connect-timeout 0 --max-time 0 --retry 5 -X POST https://runpod-manager.onrender.com/create-instance \
                          -H "Content-Type: application/json" \
                          -H "API_KEY: ${{ secrets.RUNPOD_MANAGER_API_KEY }}" \
                          -d '{
                            "instance_name": "v-workers-cicd-img-${{ github.run_id }}",
                            "gpu_type": "${{ env.RUNPOD_GPU_TYPE }}",
                            "disk_volume": 500,
                            "docker_image": "corcelio/cicd:image-server-${{ github.run_id }}",
                            "ports": "${{ env.IMAGE_PORT }}/http",
                            "cuda_versions": [
                              "11.8",
                              "12.0",
                              "12.1",
                              "12.2",
                              "12.3"
                            ],
                            "env_vars": {}
                          }')
          instance_id=$(echo "$response" | jq -r '.id')
          echo "::set-output name=instance_id::$instance_id"
        timeout-minutes: 30
  
  runpod-test-image:
    needs: runpod-deploy-image-server
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Test Runpod Image
        uses: nick-fields/retry@v3
        with:
          max_attempts: 9
          retry_on: timeout
          timeout_minutes: 5
          command: |
            curl --connect-timeout 0 --max-time 0 -v -X POST https://${{ needs.runpod-deploy-image-server.outputs.instance_id }}-${{ env.IMAGE_PORT }}.proxy.runpod.net/txt2img \
                -H "Content-Type: application/json" \
                --data-binary @/home/runner/work/vision-workers/vision-workers/${{ env.TEST_JSON_FOLDER }}/${{ env.RUNPOD_TEST_IMAGE_TXT2IMG }}
    outputs:
      instance_id: ${{ needs.runpod-deploy-image-server.outputs.instance_id }}
  
  runpod-test-image-avatar:
    needs: runpod-test-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Test Runpod Image
        uses: nick-fields/retry@v3
        with:
          max_attempts: 9
          retry_on: timeout
          timeout_minutes: 10
          command: |
            curl --connect-timeout 0 --max-time 0 -v -X POST https://${{ needs.runpod-test-image.outputs.instance_id }}-${{ env.IMAGE_PORT }}.proxy.runpod.net/avatar \
                -H "Content-Type: application/json" \
                --data-binary @/home/runner/work/vision-workers/vision-workers/${{ env.TEST_JSON_FOLDER }}/${{ env.RUNPOD_TEST_IMAGE_AVATAR }}
    outputs:
      instance_id: ${{ needs.runpod-test-image.outputs.instance_id }}

  runpod-destroy-image:
    needs: runpod-test-image-avatar
    runs-on: ubuntu-latest
    steps:
      - name: Destroy Image runpod instance
        uses: nick-fields/retry@v3
        with: 
          max_attempts: 5
          retry_on: timeout
          timeout_minutes: 1
          command: |
            curl --connect-timeout 0 --max-time 0 -v -X DELETE https://runpod-manager.onrender.com/delete-instance/${{ needs.runpod-test-image.outputs.instance_id }} \
               -H "API_KEY: ${{ secrets.RUNPOD_MANAGER_API_KEY }}"
        timeout-minutes: 1

