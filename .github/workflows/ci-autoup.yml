name: Orchestrator AutoUpdates

on:
  push:
    branches:
      - main
      - feature/*

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      previous_tag: ${{ steps.get_tags.outputs.previous_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          tags: true

      - name: Read cicd config file
        id: read_config
        run: |
          chmod +x ./runner-fetch-config.sh
          ./runner-fetch-config.sh

      - name: Decode SSH keys
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
        run: |
          mkdir /home/runner/.ssh
          echo "$SSH_PRIVATE_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine
          echo "$SSH_PUBLIC_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine.pub
          chmod 600 ~/.ssh/google_compute_engine
          chmod 644 ~/.ssh/google_compute_engine.pub
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      
      - name: Wait for GCP instance to be Ready
        run: |
          until gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "echo 'Instance is up'"; do
            echo 'Waiting for the instance to be ready...'
            sleep 10
          done
          echo 'Instance is ready!'

      - name: List all git project tags
        id: list_tags
        run: |
          git tag > tags.txt
          cat tags.txt
          if [ ! -s tags.txt ]; then
            echo "No tags found in the repository."
            exit 1
          fi
          TAGS=$(cat tags.txt)
          BASE64_TAGS=$(echo "${TAGS[*]}" | base64)
          echo "tags=$BASE64_TAGS" >> $GITHUB_ENV

      - name: Get the before latest tag (N-1)
        id: get_tags
        run: |
          TAGS=($(echo "${{ env.tags }}" | base64 --decode))
          if [ ${#TAGS[@]} -lt 2 ]; then
            echo "Not enough tags to perform operation. Need at least two tags."
            echo "Available tags: ${TAGS[@]}"
            exit 1
          fi
          PREVIOUS_TAG=${TAGS[-2]}
          ENCODED_PREVIOUS_TAG=$(echo "$PREVIOUS_TAG" | base64)
          echo "previous_tag=$ENCODED_PREVIOUS_TAG" >> $GITHUB_ENV

      - name: Checkout to N-1 Tag & build
        run: |
          PREVIOUS_TAG=$(echo "${{ env.previous_tag }}" | base64 --decode)
          git checkout $PREVIOUS_TAG

      - name: Clear remote gcp instance directory
        run: gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "rm -rf /home/runner/*"

      - name: Copy updated repository to remote server
        run: gcloud compute scp --recurse /home/runner/work/vision-workers/vision-workers ${{ env.GCP_GPU_NAME }}:/home/runner/vision-workers --zone ${{ env.GCP_GPU_ZONE }}
      
      - name: Run build script on remote gcp instance
        run: |
          PREVIOUS_TAG=$(echo "${{ env.previous_tag }}" | base64 --decode)
          echo "Building project tagged as $PREVIOUS_TAG ..." 
          gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "export BUILD_ID=${{ github.run_id }}; docker login --username=${{ secrets.DOCKER_USER }} --password=${{ secrets.DOCKER_PASSW }}; cd /home/runner/vision-workers; docker build -f Dockerfile.orchestrator -t corcelio/cicd:autoup-orchestrator-$BUILD_ID ."
        env:
          BUILD_ID: ${{ github.run_id }}
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASSW: ${{ secrets.DOCKER_PASSW }}
  
  deploy-test-previous:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          tags: true

      - name: Read cicd config file
        id: read_config
        run: |
          chmod +x ./runner-fetch-config.sh
          ./runner-fetch-config.sh

      - name: Decode SSH keys
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
        run: |
          mkdir /home/runner/.ssh
          echo "$SSH_PRIVATE_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine
          echo "$SSH_PUBLIC_KEY" | base64 --decode > /home/runner/.ssh/google_compute_engine.pub
          chmod 600 ~/.ssh/google_compute_engine
          chmod 644 ~/.ssh/google_compute_engine.pub
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      
      - name: Stop all running containers
        run: |
            gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "\
            CONTAINERS=\$(docker ps -q)
            if [ -z \"\$CONTAINERS\" ]; then
              echo 'No containers to stop.'
            else
              docker stop \$CONTAINERS || echo 'Failed to stop some containers, but continuing.'
            fi"

      - name: Start orchestrator server
        run: gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "export BUILD_ID=${{ github.run_id }}; docker run -d --gpus all --runtime=nvidia -p ${{ env.ORCH_PORT }}:${{ env.ORCH_PORT }} -p ${{ env.LLM_PORT }}:${{ env.LLM_PORT }} -e AUTOUP_SLEEP=300 -e ENV_TOKEN_AUTOUP=dev corcelio/cicd:autoup-orchestrator-$BUILD_ID"
        env:
          PORT_ORCH: ${{ env.ORCH_PORT }}  
          LLM_PORT: ${{ env.LLM_PORT }}  
          BUILD_ID: ${{ github.run_id }};

      - name: Wait for Orchestrator to be ready 
        run: |
          echo "Waiting for the Orchestrator to become available..."
          gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "\
          until curl --connect-timeout 0 --max-time 0 localhost:${{ env.ORCH_PORT }}/docs; do \
            echo 'Waiting for the Orchestrator to be ready...'; \
            sleep 10; \
          done; \
          echo 'Orchestrator is ready!'"

          echo "Waiting for the Orchestrator to become unavailable..."
          gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "\
          until ! curl --connect-timeout 1 --max-time 1 localhost:${{ env.ORCH_PORT }}/docs; do \
            echo 'Waiting for the Orchestrator to be reload...'; \
            sleep 10; \
          done; \
          echo 'Orchestrator is reloading!'"

          echo "Waiting for the Orchestrator to become available again..."
          gcloud compute ssh ${{ env.GCP_GPU_NAME }} --zone ${{ env.GCP_GPU_ZONE }} --command "\
          until curl --connect-timeout 0 --max-time 0 localhost:${{ env.ORCH_PORT }}/docs; do \
            echo 'Waiting for the Orchestrator to be ready...'; \
            sleep 10; \
          done; \
          echo 'Orchestrator is ready!'"
        env:
          PORT_ORCH: ${{ env.ORCH_PORT }}
        timeout-minutes: 30