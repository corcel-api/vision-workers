name: Orchestrator AutoUpdates

on:
  push:

jobs:
  setup:
    name: Setup and Checkout
    runs-on: ubuntu-latest
    outputs:
      previous_tag: ${{ steps.get_tags.outputs.previous_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          tags: true

      - name: List all tags
        id: list_tags
        run: |
          git tag > tags.txt
          cat tags.txt
          if [ ! -s tags.txt ]; then
            echo "No tags found in the repository."
            exit 1
          fi
          TAGS=$(cat tags.txt)
          BASE64_TAGS=$(echo "${TAGS[*]}" | base64)
          echo "tags=$BASE64_TAGS" >> $GITHUB_ENV

      - name: Get the before latest tag (N-1)
        id: get_tags
        run: |
          TAGS=($(echo "${{ env.tags }}" | base64 --decode))
          if [ ${#TAGS[@]} -lt 2 ]; then
            echo "Not enough tags to perform operation. Need at least two tags."
            echo "Available tags: ${TAGS[@]}"
            exit 1
          fi
          PREVIOUS_TAG=${TAGS[-2]}
          ENCODED_PREVIOUS_TAG=$(echo "$PREVIOUS_TAG" | base64)
          echo "previous_tag=$ENCODED_PREVIOUS_TAG" >> $GITHUB_ENV

      - name: Checkout to N-1 Tag
        run: |
          PREVIOUS_TAG=$(echo "${{ env.previous_tag }}" | base64 --decode)
          git checkout $PREVIOUS_TAG

  build:
    needs: setup
    name: Build Job
    runs-on: ubuntu-latest
    outputs:
      previous_tag: ${{ steps.setup.outputs.previous_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          tags: true
      - name: Recover N-1 tag
        run: |
          PREVIOUS_TAG=$(echo "${{ needs.setup.outputs.previous_tag }}" | base64 --decode)
          echo "Building project tagged as $PREVIOUS_TAG"
          git checkout $PREVIOUS_TAG

      
